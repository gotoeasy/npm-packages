----------------------------------------
// main
----------------------------------------
[SpringBootApplication]
package %package%;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RedisServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(RedisServiceApplication.class, args);
    }

}

----------------------------------------
// main
----------------------------------------
[Service]
package %package%.service;

import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, String> redisTemplate;

    public void set(String key, String value, String expire) {
        if ( StringUtils.isNumeric(expire) ) {
            redisTemplate.opsForValue().set(key, value, Long.parseLong(expire), TimeUnit.MILLISECONDS);
        } else {
            redisTemplate.opsForValue().set(key, value);
        }
    }

    public String get(String key) {
        return redisTemplate.opsForValue().get(key);
    }

    public void delete(String key) {
        redisTemplate.delete(key);
    }

}


----------------------------------------
// Controller
----------------------------------------
[Controller]
package %package%.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import top.gotoeasy.cloud.redis.service.RedisService;

@RestController
public class RedisController {

    @Autowired
    private RedisService redisService;

    @RequestMapping("/set")
    public void set(@RequestParam("key") String key, @RequestParam("value") String value,
            @RequestParam(value = "expire", required = false) String expire) {
        redisService.set(key, value, expire);
    }

    @RequestMapping("/get")
    public String get(@RequestParam("key") String key) {
        return redisService.get(key);
    }

    @RequestMapping("/delete")
    public void delete(@RequestParam("key") String key) {
        redisService.delete(key);
    }

}

----------------------------------------
// main test
----------------------------------------
[SpringBootApplicationTests]
package %package%;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@SpringBootTest
@RunWith(SpringRunner.class)
public class RedisServiceApplicationTests {

	@Test
	public void contextLoads() {
	}

}


----------------------------------------
// application.yml
----------------------------------------
[application.yml]
management:
  security:  
    enabled: false  
  endpoint:
    health:
      enabled: true

spring:
  application:
    name: %service-name%
  redis:
    database: 0
    host: %redis-host%
    port: %redis-port%
    password: %redis-password%
    lettuce:
      pool:
        max-active: 100
        max-wait: 30000
        max-idle: 10
        min-idle: 0
    timeout: 10000

server:
  port: %server-port%

eureka:
  instance:
    hostname: eureka.server
  client:
    enabled: true
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: %register-center-url%


----------------------------------------
// pom.xml
----------------------------------------
[pom.xml]

----------------------------------------
// gradle.properties
----------------------------------------
[gradle.properties]
groupId    = %artifact.group-id%
artifactId = %artifact.artifact-id%
version    = %artifact.version%

springBootVersion  = %spring-boot.version%
springCloudVersion = %spring-cloud.version%

----------------------------------------
// settings.gradle
----------------------------------------
[settings.gradle]
rootProject.name = artifactId

----------------------------------------
// build.gradle
----------------------------------------
[build.gradle]
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

group = groupId
version = version

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
 
dependencies {
	%dependencies%
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

repositories {
	mavenCentral()
}

tasks.withType(JavaCompile) {
	sourceCompatibility = %java.version%
	targetCompatibility = %java.version%
	options.encoding = 'UTF-8'
}

